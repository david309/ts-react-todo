{"version":3,"sources":["components/Todo.tsx","App.tsx","index.tsx"],"names":["Todo","id","title","completed","toggleStatus","removeTodo","editTodo","React","isEditing","setIsEditing","newTitle","setNewTitle","viewTemplate","type","checked","onChange","className","onClick","editTemplate","e","target","value","defaultTodos","nanoid","App","headerText","subHeading","todos","setTodos","user","setUser","newTodoTitle","setNewTodoTitle","onEditTodo","updatedTodos","map","t","todoList","onToggleStatus","filter","onDeleteTodo","name","age","country","address","street","number","zip","admin","onSubmit","preventDefault","state","htmlFor","autoComplete","length","role","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c8a6d384.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { TodoItem } from \"../interfaces\";\r\n\r\ninterface TodoProps extends TodoItem {\r\n  toggleStatus: any;\r\n  removeTodo: any;\r\n  editTodo: any;\r\n}\r\n\r\nconst Todo = ({\r\n  id,\r\n  title,\r\n  completed,\r\n  toggleStatus,\r\n  removeTodo,\r\n  editTodo,\r\n}: TodoProps) => {\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n  const [newTitle, setNewTitle] = React.useState(title);\r\n\r\n  const onEditTitle = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewTitle(e.target.value);\r\n  };\r\n\r\n  const onSubmitEdit = () => {\r\n    editTodo(id, newTitle);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const viewTemplate = (\r\n    <>\r\n      <input type=\"checkbox\" checked={completed} onChange={toggleStatus} />\r\n      <p>{title}</p>\r\n\r\n      <div>\r\n        <button className=\"btn btn-primary\" onClick={() => setIsEditing(true)}>\r\n          Edit\r\n        </button>\r\n        <button className=\"btn btn-danger\" onClick={removeTodo}>\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  const editTemplate = (\r\n    <>\r\n      <input type=\"checkbox\" checked={completed} onChange={toggleStatus} />\r\n      <input\r\n        type=\"text\"\r\n        className=\"todo-edit\"\r\n        onChange={onEditTitle}\r\n        value={newTitle}\r\n      />\r\n\r\n      <div>\r\n        <button className=\"btn btn-primary\" onClick={onSubmitEdit}>\r\n          Save\r\n        </button>\r\n        <button className=\"btn btn-danger\" onClick={() => setIsEditing(false)}>\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <li id={`todo-${id}`} className=\"todo\">\r\n      {isEditing ? editTemplate : viewTemplate}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","/* eslint-disable jsx-a11y/no-redundant-roles */\nimport * as React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport \"./App.css\";\nimport { User, TodoItem } from \"./interfaces\";\n\nconst defaultTodos = [\n  { id: nanoid(), title: \"make todo app\", completed: false },\n  { id: nanoid(), title: \"eat crackers\", completed: true },\n  { id: nanoid(), title: \"become king of the sea\", completed: false },\n];\n\ninterface AppProps {\n  headerText: string;\n  subHeading: string;\n}\n\nfunction App({ headerText, subHeading }: AppProps) {\n  const [todos, setTodos] = React.useState<TodoItem[]>(defaultTodos);\n  const [user, setUser] = React.useState<User | null>(null);\n  const [newTodoTitle, setNewTodoTitle] = React.useState<string>(\"\");\n\n  /**\n   * Toggle the status of a todo item\n   * @param {String} id unique identifier of the todo item\n   */\n  const onToggleStatus = (id: string) => {\n    const updatedTodos = todos.map((t) => {\n      if (id === t.id) {\n        return { ...t, completed: !t.completed };\n      }\n      return t;\n    });\n    setTodos(updatedTodos);\n  };\n\n  /**\n   * Delete a todo from the list\n   * @param {String} id unique identifier of the todo item\n   */\n  const onDeleteTodo = (id: string) => {\n    const updatedTodos = todos.filter((t) => t.id !== id);\n    setTodos(updatedTodos);\n  };\n\n  const onEditTodo = (id: string, newTitle: string) => {\n    const updatedTodos = todos.map((t) => {\n      if (t.id === id) {\n        return { ...t, title: newTitle };\n      }\n      return t;\n    });\n    setTodos(updatedTodos);\n  };\n\n  /**\n   * Event handler for new todo input item\n   */\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(e.target.value);\n  };\n\n  /**\n   * Event handler for new todo form submission\n   */\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (newTodoTitle === \"\") return;\n\n    setTodos([\n      ...todos,\n      { id: nanoid(), title: newTodoTitle, completed: false },\n    ]);\n\n    setNewTodoTitle((state) => \"\");\n  };\n\n  /**\n   * Gets user details and updates the app state with them\n   */\n  const getUser = () =>\n    setUser({\n      name: \"John Smith\",\n      age: 30,\n      country: \"United States\",\n      address: { street: \"Main\", number: 204, zip: 54321 },\n      admin: false,\n    });\n\n  const todoList: JSX.Element[] = todos.map((t) => (\n    <Todo\n      key={t.id}\n      id={t.id}\n      title={t.title}\n      completed={t.completed}\n      toggleStatus={() => onToggleStatus(t.id)}\n      removeTodo={() => onDeleteTodo(t.id)}\n      editTodo={onEditTodo}\n    />\n  ));\n\n  return (\n    <div id=\"App\">\n      <div className=\"user\">\n        {!user ? (\n          <button className=\"btn btn-primary\" onClick={getUser}>\n            Login\n          </button>\n        ) : (\n          <p>\n            Welcome <span className=\"user-name\">{user.name}</span>\n          </p>\n        )}\n      </div>\n\n      <div className=\"head\">\n        <h1>{headerText}</h1>\n        {subHeading && <h3>{subHeading}</h3>}\n      </div>\n\n      <form className=\"form\" onSubmit={onSubmit}>\n        <label htmlFor=\"title\">Create New Todo:</label>\n        <input\n          autoComplete=\"off\"\n          type=\"text\"\n          id=\"title\"\n          value={newTodoTitle}\n          onChange={onChange}\n        />\n\n        <button\n          className={`btn ${newTodoTitle === \"\" ? \"inactive\" : \"btn-primary\"}`}\n          type=\"submit\"\n        >\n          Add\n        </button>\n      </form>\n\n      <h2 className=\"status-heading\">\n        {todos.filter((t) => t.completed).length} of {todos.length} todo\n        {todos.length > 1 ? \"s\" : \"\"} complete\n      </h2>\n\n      <div className=\"list-wrapper\">\n        <ul className=\"todo-list\" role=\"list\">\n          {todoList}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      headerText=\"Todo List\"\n      subHeading=\"A Simple Todo Application Made Using React & TypeScript\"\n    />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}